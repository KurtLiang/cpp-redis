module Comm
{
    struct StringRobjOption
    {
        0 optional byte set_if_not_exist;
        1 optional byte set_if_exist;
        2 optional byte set_expire;
        3 optional long expire_time;  /* in seconds */
    };

    struct ListRobjOption
    {
        0 optional byte set_if_exist;
    };

    struct ZsetRobjOption
    {
        0 optional byte set_if_not_exist;  /* NX */
        1 optional byte set_if_exist;      /* XX */
    };

    struct ZsetScoreMember
    {
        0 optional double score;
        1 optional string member;
    };

    struct ZsetRangeOption
    {
        0 optional byte is_rev;
        1 optional byte with_scores;
    };

    enum EListDirection
    {
        ELIST_HEAD = 0,
        ELIST_TAIL = 1
    };


    interface Rot
    {
        int getAppName(int appId, out string appName);

        /*******************************************************/
        /*                 String                              */
        /*******************************************************/

        /**
         * @brief  SET key value
         */
        int set(int appId, string sK, string sV, StringRobjOption opt);

        /**
         * @brief  MSET key value [key value...]
         */
        int mset(int appId, map<string, string> mKVs, StringRobjOption opt);

        /**
         * @brief  GET key
         */
        int get(int appId, string sK, out string sV);

        /**
         * @brief  MGET key [key...]
         */
        int mget(int appId, vector<string> vKs, out map<string, string> mKVs);

        /**
         * @breif  INCRBY KEY INCR
         */
        int incrby(int appId, string sK, long incr, out long result);

        /**
         * @brief APPEND KEY VALUE
         */
        int append(int appId, string sK, string sV);

        /*******************************************************/
        /*                 List                                */
        /*******************************************************/

        /**
         * @brief lpush/rpush/lpushx/rpushx
         */
        int push(int appId, string sK, vector<string> vItems,  EListDirection dir, ListRobjOption opt);

        /**
         * @brief lpop/rpop
         */
        int pop(int appId, string sK, EListDirection dir, out string  sItem);


        /**
         * @brief lrange key start stop #[stop] is included
         */
        int lrange(int appId, string sK, int start, int end, out vector<string>  vItems);


        /*******************************************************/
        /*                 Hash                                */
        /*******************************************************/

        /**
         * @brief HMSET key field value [field value...]
         */
        int hmset(int appId, string sK, map<string, string> mFV);

        /**
         * @brief HMGET key field [field...]
         */
        int hmget(int appId, string sK, vector<string>  vFields, out map<string, string> mFV);

        /**
         * @brief HEXISTS key field
         */
        int hexists(int appId, string sK, string sField, out int exist_res);

        /**
         * @brief HDEL key field [field...]
         */
        int hdel(int appId, string sK, vector<string> vFields);

        /*******************************************************/
        /*                 Set                                 */
        /*******************************************************/

        /**
         * @brief SADD key member [member...]
         */
        int sadd(int appId, string sK, vector<string> sMember);

        /**
         * @brief SREM key memgber [member...]
         */
        int srem(int appId, string sK, vector<string> sMember);

        /**
         * @brief SMEMBERS key
         */
        int smembers(int appId, string sK, out vector<string> vMembers);

        /**
         * @brief SINTER key [key...]
         */
        int sinter(int appId, vector<string> vK, out vector<string> vResults);

        /**
         * @brief SDIFF key [key...]
         *        difference result of first set between other  sets.
         */
        int sdiff(int appId, vector<string> vK, out vector<string> vResults);

        /**
         * @brief SUNION key [key...]
         */
        int sunion(int appId, vector<string> vK, out vector<string> vResults);


        /*******************************************************/
        /*                 Zset                                */
        /*******************************************************/

        /**
         * @brief ZDD key score member [score member...]
         */
        int zadd(int appId, string sK, vector<ZsetScoreMember> vScoreMember, ZsetRobjOption option);

        /**
         * @brief ZREM key member [member...]
         */
        int zrem(int appId, string sK, vector<string> vMembers);

        /**
         * @brief ZRANK/ZREVRANK key member
         *
         * @param rev          0 rank order by asc
         *                     1 rank order by desc
         * @param rank         zero-based
         */
        int zrank(int appId, string sK, string sMember, int rev, out int rank);

        /**
         * @brief ZINCRBY key increment member
         * @param new_score     output new score
         */
        int zincrby(int appId, string sK, double increment, string sMember, out double new_score);

        /**
         * @brief ZRANGE key start stop
         */
        int zrange(int appId, string sK, int start, int stop, ZsetRangeOption opt, out vector<ZsetScoreMember> vScoreMembers);

        /*******************************************************/
        /*                 General                             */
        /*******************************************************/

        /**
         * @brief DEL key [key...]
         *        ignore it if key doesn't exist
         * @number  number of keys deleted
         */
        int del(int appId, vector<string> vKs, out int deleted);

        /**
         * @brief EXISTS key [key...]
         * @param  number  output number of keys exists
         */
        int exists(int appId, vector<string> vKs, out int existed);

        /**
         * @brief EXPIRE key seconds
         * @param seconds   make it persistent if -1
         */
        int expire(int appId, string sK, long seconds);

        /**
         * @brief TTL key
         * @param seconds >=0 remaining seconds to expire
         *                -1 if persistent
         *                -2 if not existed or expired
         */
        int ttl(int appId, string sK, out long seconds);
    };
};
